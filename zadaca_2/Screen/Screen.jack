/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen
{
    static Array twoToThe;
    static bool currentColor; //ako true(1) bojamo crno inace bijelo
    
    /** Initializes the Screen. */
    function void init()
    {
        var int i, pow;
        let twoToThe = Array.new(16);
        
        let pow = 1;
        while (i < 16)
        {
            let twoToThe[i] = pow;
            let pow = pow + pow;
            let i = i + 1;
        } 
        
        let currentColor = true;

        return;
    }

    /** Erases the entire screen. */
    function void clearScreen()
    {
        var int i;

        while (i < 8192){
            do Memroy.poke(16384 + i, 0);
            let i = i + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b)
    {
        let currentColor = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y)
    {
        var int address, value, pos;

        let address = (32 * y) + (x / 16);
        let value = Memory.peek(16384 + address);

        let pos = x - ((x / 16)  * 16); //na ovaj nacin izdracunamo x mod 16
        
        if (currentColor = true){
            let value = value | twoToThe[pos];
        }else{
            let value = value & ~twoToThe[pos];
        }
        do Memory.poke(16384 + address, value);

        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2)
    {
        var int a, b, dx, dy, diff, tmp;
        var bool invert; //zelimo li obrnuti smjer pravca
        
        if (x2 < x1){
            let tmp = x1;
            let x1 = x2;
            let x2 = tmp;

            let tmp = y1;
            let y1 = y2;
            let y2 = tmp;
        }

        if (y2 < y1){
            let invert = true;
        }

        let dx = x2 - x1;
        let dy = Math.abs(y2 - y1);

        //poseban slučaj za horizontalan pravac
        if (dy = 0){
            let a = x1;
            while (a < x2){
                do Screen.drawPixel(a, y1);
                let a = a + 1;
            }
            return;
        }
        //poseban slučaj za vertikalan pravac
        if (dx = 0){
            let b = Math.min(y1, y2);
            
            while (b < Math.max(y1, y2)){
                do Screen.drawPixel(x1, b);
                let b = b + 1;
            }
            
            return;
        }

        while ((a < dx) & (b < dy)){
            
            if (invert){
                do Screen.drawPixel(x1 + a, y1 - b);
            }else{
                do Screen.drawPixel(x1 + a, y1 + b);
            }
            if (diff < 0){
                let a = a + 1;
                let diff = diff + dy;
            }else{
                let b = b + 1;
                let diff = diff - dx;
            }
        }

        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2)
    {
		while(~(y1 = y2))
		{
			do Screen.drawLine(x1,y1, x2,y1);
			let y1 = y1+1;
		}
		do Screen.drawLine(x1,y1, x2,y1);
		return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x0, int y0, int r)
    {
        var int x,y, radiusError;
		let x = r;
		let y = 0;
		let radiusError = 1-x;

		while( (x = y) | (x > y))
	    {
			do Screen.drawLine(x + x0, y + y0, -x + x0, y + y0);
			do Screen.drawLine(y + x0, x + y0, -y + x0, x + y0);
			do Screen.drawLine(-x + x0, -y + y0, x + x0, -y + y0);
			do Screen.drawLine(y + x0, -x + y0, -y + x0, -x + y0);
		
			let y = y +1;
			if (radiusError<0)
			{
				let radiusError = radiusError + (2 * y) + 1;
			} 
			else 
			{
				let x = x-1;
				let radiusError = radiusError + (2 * (y - x + 1));
			}
		}
		return;
    }
}